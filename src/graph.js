// Generated by CoffeeScript 1.3.3
(function() {
  var __slice = [].slice;

  define(['src/utils'], function(Utils) {
    var Graph;
    return Graph = (function() {

      function Graph(_edgeWeights) {
        this._edgeWeights = _edgeWeights != null ? _edgeWeights : [];
        this._neighbours = {};
        this._getNeighbours();
        this._weightless = this._isWeightlessGraph();
        if (!this._weightless) {
          this._distanceBetween = {};
          this._getDistanceBetween();
        }
      }

      Graph.prototype._getNeighbours = function() {
        var _this = this;
        return this._eachTuple(this._edgeWeights, function(vertex1, vertex2) {
          var _base, _base1, _ref, _ref1;
          if ((_ref = (_base = _this._neighbours)[vertex1]) == null) {
            _base[vertex1] = [];
          }
          if ((_ref1 = (_base1 = _this._neighbours)[vertex2]) == null) {
            _base1[vertex2] = [];
          }
          if (vertex1 !== vertex2) {
            _this._neighbours[vertex1].push(vertex2);
            return _this._neighbours[vertex2].push(vertex1);
          }
        });
      };

      Graph.prototype._eachTuple = function(tuples, callback) {
        var tuple, _i, _len;
        for (_i = 0, _len = tuples.length; _i < _len; _i++) {
          tuple = tuples[_i];
          if (false === callback.apply(null, tuple)) {
            return;
          }
        }
      };

      Graph.prototype._isWeightlessGraph = function() {
        var pair, _i, _len, _ref;
        _ref = this._edgeWeights;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          pair = _ref[_i];
          if (pair.length !== 2) {
            return false;
          }
        }
        return true;
      };

      Graph.prototype._shortestPath = function(previous, source, target) {
        var path;
        path = [];
        while (previous[target]) {
          path.unshift(target);
          target = previous[target];
        }
        return path;
      };

      Graph.prototype._getDistanceBetween = function() {
        var _this = this;
        return this._eachTuple(this._edgeWeights, function(vertex1, vertex2, weight) {
          var _base, _base1, _ref, _ref1;
          if (isWeightless) {
            weight = 1;
          }
          if ((_ref = (_base = _this._distanceBetween)[vertex1]) == null) {
            _base[vertex1] = {};
          }
          if ((_ref1 = (_base1 = _this._distanceBetween)[vertex2]) == null) {
            _base1[vertex2] = {};
          }
          _this._distanceBetween[vertex1][vertex2] = weight;
          return _this._distanceBetween[vertex2][vertex1] = weight;
        });
      };

      Graph.prototype.distanceBetween = function(vertex1, vertex2) {
        if (this._weightless) {
          return 1;
        }
        return this._distanceBetween[vertex1][vertex2] || Infinity;
      };

      Graph.prototype.vertices = function() {
        var vertex, _results;
        _results = [];
        for (vertex in this._neighbours) {
          _results.push(vertex);
        }
        return _results;
      };

      Graph.prototype.dijkstras = function() {
        var alt, closest, distance, minDistance, neighbour, pathDistances, previous, source, targetIndex, targets, vertex, vertices, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
        source = arguments[0], targets = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (!source) {
          return;
        }
        vertices = this.vertices();
        distance = {};
        previous = {};
        for (_i = 0, _len = vertices.length; _i < _len; _i++) {
          vertex = vertices[_i];
          distance[vertex] = Infinity;
          previous[vertex] = null;
        }
        distance[source] = 0;
        while (vertices.length) {
          closest = vertices[0];
          _ref = vertices.slice(1);
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            neighbour = _ref[_j];
            if (distance[neighbour] < distance[closest]) {
              closest = neighbour;
            }
          }
          if (distance[closest] === Infinity) {
            break;
          }
          vertices.splice(vertices.indexOf(closest), 1);
          _ref1 = this._neighbours[closest];
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            neighbour = _ref1[_k];
            if (vertices.indexOf(neighbour) === -1) {
              continue;
            }
            alt = distance[closest] + this.distanceBetween(closest, neighbour);
            if (alt < distance[neighbour]) {
              distance[neighbour] = alt;
              previous[neighbour] = closest;
            }
          }
        }
        if (!targets.length) {
          return distance;
        }
        pathDistances = targets.map(function(target) {
          return distance[target];
        });
        minDistance = Math.min.apply(null, pathDistances);
        targetIndex = pathDistances.indexOf(minDistance);
        return this._shortestPath(previous, source, targets[targetIndex]);
      };

      return Graph;

    })();
  });

}).call(this);
