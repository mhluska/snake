// Generated by CoffeeScript 1.3.3
(function() {
  var _ref;

  if ((_ref = window.Game) == null) {
    window.Game = {};
  }

  Game.Graph = (function() {

    function Graph(graph) {
      this.graph = graph != null ? graph : {};
    }

    Graph.prototype.vertices = function() {
      var vertex, _results;
      _results = [];
      for (vertex in this.graph) {
        _results.push(vertex);
      }
      return _results;
    };

    Graph.prototype.dijkstras = function(source) {
      var closest, distance, neighbour, previous, vertex, vertices, _i, _len, _ref1, _results;
      distance = {};
      previous = {};
      for (vertex in graph) {
        distance[vertex] = Infinity;
        previous[vertex] = null;
      }
      distance[source] = 0;
      vertices = this.vertices();
      console.log(vertices);
      return;
      _results = [];
      while (vertices.length) {
        closest = vertices[0];
        _ref1 = vertices.slice(1);
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          neighbour = _ref1[_i];
          if (distance[neighbour] < distance[closest]) {
            closest = neighbour;
          }
        }
        if (distance[closest] === Infinity) {
          break;
        }
        vertices.splice(vertices.indexOf(closest), 1);
        _results.push((function() {
          var _j, _len1, _ref2, _results1;
          _ref2 = this.graph[closest];
          _results1 = [];
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            neighbour = _ref2[_j];
            if (vertices.indexOf(neighbour === -1)) {
              continue;
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return Graph;

  })();

}).call(this);
