// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  SNAKE.Graphics2 = (function(_super) {

    __extends(Graphics2, _super);

    function Graphics2(game, grid) {
      this.game = game;
      this.grid = grid;
      Graphics2.__super__.constructor.call(this, this.game, this.grid);
      this.grid.makeWorld();
      this.buildDOM();
      this.nodeRemoveQueue = [];
    }

    Graphics2.prototype.setNodePosition = function(node, pos) {
      if (!node) {
        return;
      }
      node.css({
        top: pos.y * this.grid.squareHeight,
        left: pos.x * this.grid.squareWidth
      });
      return node.show();
    };

    Graphics2.prototype.update = function() {
      var _this = this;
      return this.grid.eachSquare(function(pos, square) {
        var type, _i, _len, _ref, _results;
        _ref = _this.grid.squareTypes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          type = _ref[_i];
          if (square[type] === true) {
            square[type] = _this.appendDOMNode(pos, type);
          }
          if (square[type]) {
            _results.push(_this.setNodePosition(square[type], pos));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
    };

    Graphics2.prototype.buildDOMNode = function(pos, type) {
      var node;
      node = $("<div class='" + type + "'></div>");
      node.css({
        width: this.grid.squareWidth,
        height: this.grid.squareHeight
      });
      this.setNodePosition(node, pos);
      return node;
    };

    Graphics2.prototype.appendDOMNode = function(pos, type) {
      var node;
      node = this.buildDOMNode(pos, type);
      return node.appendTo(this.dom.grid);
    };

    Graphics2.prototype.buildDOM = function() {
      var _this = this;
      this.dom = {};
      this.dom.grid = $('<div id="grid"></div>');
      this.dom.grid.css({
        width: this.grid.squareWidth * this.grid.squaresX,
        height: this.grid.squareHeight * this.grid.squaresY
      });
      $('body').prepend(this.dom.grid);
      return this.grid.eachSquare(function(pos, square) {
        var type;
        if (_this.grid.isEmptySquare(square)) {
          return;
        }
        if (square.snake) {
          type = 'snake';
        }
        if (square.food) {
          type = 'food';
        }
        return square[type] = _this.appendDOMNode(pos, type);
      });
    };

    Graphics2.prototype.entityExists = function(entity) {
      return entity && (entity instanceof jQuery);
    };

    Graphics2.prototype.entityIsVisible = function(entity) {
      if (!this.entityExists(entity)) {
        return false;
      }
      return $(entity).is(':visible');
    };

    Graphics2.prototype.hideEntity = function(entity) {
      if (!this.entityExists(entity)) {
        return;
      }
      return $(entity).hide();
    };

    return Graphics2;

  })(SNAKE.Graphics);

}).call(this);
