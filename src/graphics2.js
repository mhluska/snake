// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'src/graphics'], function($, Graphics) {
    var Graphics2;
    return Graphics2 = (function(_super) {

      __extends(Graphics2, _super);

      function Graphics2(game, grid, gridNode) {
        this.game = game;
        this.grid = grid;
        this.gridNode = gridNode;
        Graphics2.__super__.constructor.call(this, this.game);
        this._buildDom();
      }

      Graphics2.prototype._buildDom = function(gridNode) {
        this.gridNode.css({
          width: this.grid.squareWidth * this.grid.squaresX,
          height: this.grid.squareHeight * this.grid.squaresY
        });
        return $('body').prepend(this.gridNode);
      };

      Graphics2.prototype._buildDomNode = function(pos, type) {
        var node;
        node = $("<div class='" + type + "'></div>");
        node.css({
          width: this.grid.squareWidth,
          height: this.grid.squareHeight
        });
        return node.hide();
      };

      Graphics2.prototype._setNodePosition = function(node, pos) {
        return node.css({
          top: pos.y * this.grid.squareHeight,
          left: pos.x * this.grid.squareWidth
        });
      };

      Graphics2.prototype._awaitingShow = function(piece) {
        return piece.visible() && !$(piece.node).is(':visible');
      };

      Graphics2.prototype._awaitingHide = function(piece) {
        return piece.hidden() && $(piece.node).is(':visible');
      };

      Graphics2.prototype._makeNode = function(pos, type) {
        var node;
        node = this._buildDomNode(pos, type);
        this.gridNode.append(node);
        return this._setNodePosition(node, pos);
      };

      Graphics2.prototype.update = function() {
        var _this = this;
        return this.grid.eachSquare(function(pos, square) {
          var piece, type, _results;
          _results = [];
          for (type in square) {
            piece = square[type];
            if (_this._awaitingShow(piece)) {
              if (!piece.exists()) {
                piece.node = _this._makeNode(pos, type);
              }
              $(piece.node).show();
            }
            if (_this._awaitingHide(piece)) {
              _results.push($(piece.node).hide());
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        });
      };

      return Graphics2;

    })(Graphics);
  });

}).call(this);
