// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SNAKE.Grid = (function() {

    function Grid(game, snake, squaresX, squaresY) {
      this.game = game;
      this.snake = snake;
      this.squaresX = squaresX != null ? squaresX : 25;
      this.squaresY = squaresY != null ? squaresY : 15;
      this.dropFood = __bind(this.dropFood, this);

      this._squareToEdges = __bind(this._squareToEdges, this);

      this.graphics = null;
      this.squareTypes = ['food', 'snake'];
      this.foodCount = 0;
      this.foodItems = null;
    }

    Grid.prototype._squareToEdges = function(pos) {
      var edges,
        _this = this;
      if (this.squareHasType('snake', pos) && !pos.equals(this.snake.head)) {
        return;
      }
      edges = [];
      this.eachAdjacentPosition(pos, function(adjacentPos, direction) {
        if (_this.squareHasType('snake', adjacentPos)) {
          return;
        }
        return edges.push([pos.toString(), adjacentPos.toString()]);
      });
      return edges;
    };

    Grid.prototype._unregisterAllTypesAt = function(pos) {
      var type, _i, _len, _ref, _results;
      _ref = this.squareTypes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        type = _ref[_i];
        _results.push(this.unregisterSquareAt(pos, type));
      }
      return _results;
    };

    Grid.prototype.makeWorld = function() {
      var _this = this;
      return this.eachSquare(function(pos) {
        return _this._unregisterAllTypesAt(pos);
      });
    };

    Grid.prototype.setup = function(graphics) {
      return this.graphics = graphics;
    };

    Grid.prototype.isEmptySquare = function(square) {
      var type, _i, _len, _ref;
      _ref = this.squareTypes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        type = _ref[_i];
        if (square[type]) {
          return false;
        }
      }
      return true;
    };

    Grid.prototype.registerFoodAt = function(pos) {
      if (!this.registerSquareAt(pos, 'food')) {
        return false;
      }
      this.foodCount += 1;
      return true;
    };

    Grid.prototype.unregisterFoodAt = function(pos) {
      if (!this.unregisterSquareAt(pos, 'food')) {
        return false;
      }
      this.foodCount -= 1;
      return true;
    };

    Grid.prototype.squareHasFood = function(pos) {
      if (!pos) {
        return false;
      }
      return this.squareHasType('food', pos);
    };

    Grid.prototype.dropFood = function(pos) {
      if (pos == null) {
        pos = SNAKE.Utils.randPair(this.squaresX - 1, this.squaresY - 1);
      }
      this.foodItems.enqueue(pos);
      if (this.foodCount > this.maxFood) {
        return this.foodItems.dequeue();
      }
    };

    Grid.prototype.toGraph = function() {
      var graphEdges,
        _this = this;
      graphEdges = [];
      this.eachSquare(function(pos) {
        return SNAKE.Utils.concat(graphEdges, _this._squareToEdges(pos));
      });
      return graphEdges;
    };

    return Grid;

  })();

}).call(this);
