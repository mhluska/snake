// Generated by CoffeeScript 1.3.3
(function() {

  define(['pair'], function(Pair) {
    var World;
    return World = (function() {

      function World() {}

      World.prototype.registerSquareAt = function(pos, type) {
        if (this.squareAt(pos, type)) {
          return false;
        }
        this.squareAt(pos, type, true);
        return true;
      };

      World.prototype.unregisterSquareAt = function(pos, type) {
        if (!this.squareHasType(type, pos)) {
          return false;
        }
        this.graphics.hideEntity(this.squareAt(pos, type));
        this.squareAt(pos, type, null);
        return true;
      };

      World.prototype.squareHasType = function(type, pos) {
        return (this.squareAt(pos, type)) != null;
      };

      World.prototype.registerFoodAt = function(pos) {
        if (!this.registerSquareAt(pos, 'food')) {
          return false;
        }
        this.game.foodCount += 1;
        return true;
      };

      World.prototype.unregisterFoodAt = function(pos) {
        if (!this.unregisterSquareAt(pos, 'food')) {
          return false;
        }
        this.game.foodCount -= 1;
        return true;
      };

      World.prototype.squareHasFood = function(pos) {
        if (!pos) {
          return false;
        }
        return this.squareHasType('food', pos);
      };

      World.prototype.moduloBoundaries = function(pair, squaresX, squaresY) {
        pair.x %= this.squaresX;
        pair.y %= this.squaresY;
        if (pair.x < 0) {
          pair.x = this.squaresX - 1;
        }
        if (pair.y < 0) {
          pair.y = this.squaresY - 1;
        }
        return pair;
      };

      World.prototype.eachAdjacentPosition = function(pos, callback) {
        var adjacentPos, direction, normalizedPos, positions;
        positions = {
          down: new Pair(pos.x, pos.y + 1),
          right: new Pair(pos.x + 1, pos.y),
          up: new Pair(pos.x, pos.y - 1),
          left: new Pair(pos.x - 1, pos.y)
        };
        for (direction in positions) {
          adjacentPos = positions[direction];
          normalizedPos = this.moduloBoundaries(adjacentPos);
          if (false === callback(normalizedPos, direction)) {
            return;
          }
        }
      };

      return World;

    })();
  });

}).call(this);
