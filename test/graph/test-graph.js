// Generated by CoffeeScript 1.3.3
(function() {
  'import graph';

  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.TestGraph = (function(_super) {

    __extends(TestGraph, _super);

    function TestGraph() {
      return TestGraph.__super__.constructor.apply(this, arguments);
    }

    TestGraph.prototype.before = function() {
      this.edgeWeights = [['a', 'b', 2], ['a', 'c', 8], ['a', 'd', 20], ['d', 'c', 9], ['c', 'f', 1], ['d', 'f', 1], ['e', 'e', 0]];
      return this.edges = [['a', 'b'], ['a', 'c'], ['a', 'd'], ['d', 'c'], ['c', 'f'], ['d', 'f'], ['e', 'e']];
    };

    TestGraph.prototype.testGraphDetails = function() {
      var distance, graph;
      this.show(this.edgeWeights, "Edge weights:");
      graph = new Game.Graph(this.edgeWeights);
      this.show(graph._neighbours, "Internal neighbours object:");
      this.show(graph.vertices(), 'Vertices:');
      this.show(graph._distanceBetween, 'Internal distanceBetween object:');
      distance = graph.distanceBetween(graph.vertices()[0], graph.vertices()[1]);
      return this.show(distance, 'Distance between vertices a and b:');
    };

    TestGraph.prototype.testDijkstrasWithWeights = function() {
      var dijkstras, graph;
      graph = new Game.Graph(this.edgeWeights);
      dijkstras = graph.dijkstras('a', 'd');
      this.show(dijkstras, "Result of Dijkstra's algorithm:");
      return this.assert(this.equals(dijkstras, ['c', 'f', 'd']), "Shortest path from 'a' to 'd'");
    };

    TestGraph.prototype.testDijkstrasWithoutWeights = function() {
      var equal, weightlessDijkstras, weightlessGraph;
      weightlessGraph = new Game.Graph(this.edges);
      weightlessDijkstras = weightlessGraph.dijkstras('a', 'd');
      this.show(weightlessDijkstras, "Result of weightless Dijkstra's algorithm:");
      equal = this.equals(weightlessDijkstras, ['c', 'f', 'd']);
      return this.assert(equal, "Shortest path from 'a' to 'd' in a weightless graph.");
    };

    return TestGraph;

  })(Test);

}).call(this);
